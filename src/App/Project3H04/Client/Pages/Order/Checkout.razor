@page "/checkout"
@inject CartState Cartstate
@inject HttpClient httpClient
@using Project3H04.Shared.DTO
@using Blazored.FluentValidation
@using Mollie.Api.Client.Abstract
@using Mollie.Api.Client
@using Mollie.Api.Models
@using Mollie.Api.Models.Payment.Request
@using Mollie.Api.Models.Payment.Response
@inject NavigationManager NavManager
<h3>Checkout</h3>

<EditForm Model="@Bestelling" OnValidSubmit="@Submit">
    <FluentValidationValidator />
    <ValidationSummary />
    <h3>items in cart</h3>
    @foreach (var item in Cartstate.Cart)
    {
        <div>
            <i class="bi bi-arrow-right-circle"></i> <p>Arwork : @(item.Naam), Price : @item.Prijs</p>
        </div>
    }
    <p>Total Price = @Cartstate.TotalePrijs</p>
    <div class="form-group">
        <label for="straat">Street</label>
        <InputText id="straat" @bind-Value="Bestelling.Straat" class="form-control" />
    </div>
    <div class="form-group">
        <label for="postcode">PostalCode</label>
        <InputText id="postcode" @bind-Value="Bestelling.Postcode" class="form-control" />
    </div>
    <div class="form-group">
        <label for="gemeente">City</label>
        <InputText id="gemeente" @bind-Value="Bestelling.Gemeente" class="form-control" />
    </div>
    <div class="form-group">
        <label for="gemeente">Country</label>
        <InputText id="gemeente" @bind-Value="Bestelling.Land" class="form-control" />
    </div>

    <button type="submit">Checkout</button>
</EditForm>

@code {
    private Bestelling_DTO.Create Bestelling = new() { };

    async Task Submit()
    {
        Bestelling.TotalePrijs = Cartstate.TotalePrijs;
        Bestelling.WinkelmandKunstwerken = Cartstate.Cart;
        Console.WriteLine(Bestelling.TotalePrijs);
        var response = await httpClient.PostAsJsonAsync<Bestelling_DTO.Create>($"api/order/Mollie", Bestelling);
        PaymentResponse paymentresponse = await response.Content.ReadFromJsonAsync<PaymentResponse>();
        string molliestring = paymentresponse.Links.Checkout.ToString().Substring(12); //prutsen met string voor juiste formaat
        Console.WriteLine(molliestring);
        Bestelling.PaymentId = paymentresponse.Id;
        Console.WriteLine(paymentresponse.Id);
        NavManager.NavigateTo(molliestring);
        await httpClient.PostAsJsonAsync<Bestelling_DTO.Create>($"api/order/persistOrder", Bestelling);
    }
}
