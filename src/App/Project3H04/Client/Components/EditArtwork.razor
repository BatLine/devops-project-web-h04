@inject HttpClient httpClient

@if (Model != null)
{
    <div class="main">
        <EditForm Model="@Model" OnValidSubmit="@Submit">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="@Model.Naam">Name</label>
                <InputText @bind-Value="@Model.Naam" class="form-control" />
            </div>
            <!--Fotos-->
            <div class="form-group">
                <label>Pictures: </label>
                <InputFile OnChange="@OnInputFileChange" multiple />
                <div>
                    @foreach (var fotoDTO in Model.Fotos) //foto's die reeds op server staan
                    {
                        <div class="form-control-file">
                            <img src="/images/@fotoDTO.Pad" alt="@fotoDTO.Pad" />
                            <button class="btn btn-danger" @onclick="() => Model.Fotos.Remove(fotoDTO)">Verwijder</button>
                        </div>
                    }
                    @foreach (var foto in _loadedFotos) //foto's die tijdelijk worden opgeslagen (nog niet op server geüploaded)
                    {
                        <div class="form-control-file">
                            <img src="/images/@foto" alt="@foto" />
                            <button class="btn btn-danger" @onclick="() => RemoveImage(foto)">Verwijder</button>
                        </div>
                    }
                </div>
            </div>
            <div class="form-group">
                <label>
                    For Sale
                    <InputCheckbox @bind-Value="@Model.TeKoop" />
                </label>
            </div>
            @if (Model.TeKoop)
            {
                <div class="form-group">
                    @if (Model.IsVeilbaar)
                    {<label for="@Model.Prijs">StartingPrice </label> }
                    else
                    { <label for="@Model.Prijs">Price </label>}
                    <InputNumber @bind-Value="@Model.Prijs" class="form-control" />
                </div>
                <div class="form-group">
                    <label for="@Model.IsVeilbaar">Sell by Auction?</label>
                    <InputCheckbox @bind-Value="@Model.IsVeilbaar" />
                </div>
            }
            <div class="form-group">
                <label for="@Model.Materiaal">Material</label>
                <InputSelect @bind-Value="@Model.Materiaal" class="form-control">
                    @if (_materialen != null)
                        {
                        <option value=""></option>
                        @foreach (var mat in _materialen)
                            {
                            <option value="@mat">@mat</option>
                            }
                        }
                </InputSelect>

            </div>
            <div class="form-group">
                <label for="@Model.Beschrijving">Description</label>
                <InputTextArea @bind-Value="@Model.Beschrijving" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary">
                Confirm
            </button>
            <a class="btn btn-secondary" href="/">Cancel</a>


            <DataAnnotationsValidator />
        </EditForm>
    </div>
}
else
{
    <LoadingSpinner />
}



@code{
    //parameter zodat we het ook als Edit formulier kunnen gebruiken
    [Parameter] public Kunstwerk_DTO.Create Model { get; set; }

    private IList<string> _loadedFotos = new List<string>();

    private IList<string> _materialen = new List<string> //voorlopig nog hardgecodeerd
    {
        "Wood",
        "Metal",
        "Plastic",
        "Paper",
        "Other"
    };

    protected override void OnInitialized()
    {
        if (Model == null) //in dit geval werkt het als een Create formulier
        {
            Model = new();
        }
        else //Edit DTO werd geïnjecteerd
        {
            foreach (var foto in Model.Fotos)
            {
                _loadedFotos.Add(foto.Pad); //foto's lokaal renderen
            }
        }
    }

    public async Task Submit()
    {
        if (!Model.TeKoop)
        {
            Model.IsVeilbaar = false; //als het niet te koop is is het ook niet per opbod te koop
            Model.Prijs = 0; //prijs zou nutteloos zijn als het niet te koop is
        }
        foreach (var foto in _loadedFotos)
        {
            //uploaden naar server eerst?
            Model.Fotos.Add(new Foto_DTO
            {
                Pad = foto
            });
        }

        #region Debug (mag weg opzich)
        Console.WriteLine("Naam: " + Model.Naam);
        Console.WriteLine("Te koop? " + Model.TeKoop);
        Console.WriteLine("Veilbaar? " + Model.IsVeilbaar);

        Console.WriteLine("Prijs: " + Model.Prijs);
        Console.WriteLine(Model.Materiaal);
        Console.WriteLine(Model.Beschrijving);
        foreach (var foto in Model.Fotos)
        {
            Console.WriteLine("Foto: " + foto.Pad);
        }
        #endregion

        if (Model is Kunstwerk_DTO.Edit)
        {
            //API call "PUT"
        }
        else if(Model is Kunstwerk_DTO.Create)
        {
            //API call "POST"
        }
        else
        {
            //Error
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        foreach (var file in e.GetMultipleFiles())
        {
            _loadedFotos.Add(file.Name);
        }
    }

    private void RemoveImage(string foto)
    {
        _loadedFotos.Remove(foto);
    }

}