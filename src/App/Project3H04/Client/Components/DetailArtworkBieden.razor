@using System.Security.Claims
@inject PublicClient httpClient

@if (Veiling != null)
{
    @if (!Veiling.BodenOpVeiling.Any())
    {
        <h4>Er is nog niet geboden.</h4>
    }
    else
    {
        <p style="font-size: 1.5rem; color: dimgray"><span style="font-weight: bold; color: black">Hoogste bod: </span>€@Veiling.HoogsteBod.BodPrijs.ToString("0.##")</p>
        @if (Veiling.BodenOpVeiling.Count() > 1)
        {
            <p style="font-weight: bold">Vorige boden:</p>
            <p>
                @foreach (var bod in Veiling.BodenOpVeiling.TakeLast(4).SkipLast(1))
                {
                <span style="font-size: 1rem; color: dimgray">
                    @{
                        TimeSpan ts = bod.Datum - DateTime.Now;
                        if (ts.Days > 1)
                        {
                            <span>@ts.Days days ago</span>
                        }
                        else if (ts.Days == 1)
                        {
                            <span>1 day ago</span>
                        }
                        else
                        {
                            if (ts.Hours > 1)
                            {
                                <span>@ts.Hours hours ago</span>
                            }
                            else if (ts.Hours == 1)
                            {
                                <span>1 hour ago</span>
                            }
                            else {
                                if (ts.Minutes > 1)
                                {
                                    <span>@ts.Minutes minutes ago</span>
                                }
                                else
                                {
                                    <span>1 minute ago</span>
                                }
                            }

                        }
                        <span>&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;&nbsp;&nbsp;&nbsp;€@bod.BodPrijs.ToString("0.##")</span>
                    }
                </span><br />
                }
            </p>
        }
        @if (Veiling.HoogsteBod.Klant.GebruikerId != Klant.GebruikerId)
        {
            //Klant kan zichzelf niet outbieden
            <label for="bidAmount">Bid amount:</label>
            <input type="number" id="bidAmount" name="bidAmount" min="@Veiling.HoogsteBod.BodPrijs" max="@decimal.MaxValue" @bind-value="@NewBidValue"/>
            <br/>
            <button class="btn btn-secondary ml-1" @onclick="PlaceBid">Place bid</button>
        }
    }
}
else
{
    //Still loading?
}

@code {
    [Parameter] public int KunstwerkId { get; set; }
    private Veiling_DTO Veiling { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private Klant_DTO Klant;
    private int NewBidValue { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await SetProperties();
    }

    private async Task SetProperties() {
        Veiling = await httpClient.Client.GetFromJsonAsync<Veiling_DTO>($"api/Veiling/GetByKunstwerkId/{KunstwerkId}");
        var user = (await authenticationStateTask).User;
        Klant = await httpClient.Client.GetFromJsonAsync<Klant_DTO>($"api/Klant/byEmail/{user.Identity.Name}");
        NewBidValue = Veiling.BodenOpVeiling.Any() ? Veiling.HoogsteBod.BodPrijs : Veiling.Kunstwerk.Prijs; //.ToString("0.##")
    }

    private async void PlaceBid() {
        Bod_DTO bod = new Bod_DTO {
            BodPrijs = NewBidValue,
            Datum = DateTime.Now,
            Klant = this.Klant
        };

        //API call "PUT"
        var response = await httpClient.Client.PutAsJsonAsync<Bod_DTO>($"api/Veiling/AddBodToVeiling/{Veiling.Id}", bod);
        response.EnsureSuccessStatusCode();
        var responseResult = await response.Content.ReadFromJsonAsync<bool>();

        if (responseResult) {
            //Bod geplaatst
            Console.WriteLine("Bod geplaatst");
        }
        else {
            //Bod niet geplaatst
            Console.WriteLine("Bod niet geplaatst");
        }

        await SetProperties();
        StateHasChanged();
    }
}
